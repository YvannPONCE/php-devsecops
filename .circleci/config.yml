version: 2.1

# List of all environment variables accessible in this config file
# https://circleci.com/docs/2.0/env-vars/#built-in-environment-variables

# Recommendations
# ---------------

# General Principles:
#
#  1. Descriptive: The job name should clearly describe what the job does.
#  2. Concise: Names should be as short as possible while still being descriptive.
#  3. Consistent: Use a consistent format or pattern for all job names.
#  4. Avoid Ambiguous Abbreviations: If you use abbreviations, ensure they are widely understood.
#
# Naming Convention Proposal:
#
#  1. Prefixes based on the nature of the job:
#     - build-: for jobs related to building or installation.
#     - lint-: for jobs related to code quality checking.
#     - test-: for jobs related to testing.
#     - security-: for jobs related to security.
#     - metrics-: for jobs related to metrics generation.
#     - deploy-: for jobs related to deployment.
#     - notify-: for jobs related to notifications.
#     - debug-: for jobs related to debugging.
#     - setup-: for jobs related to set up.
#     - init-: for jobs related to initialization.
#     - generate-: for jobs related to generation.
#     - validate-: for jobs related to validation.
#     - compile-: for jobs related to compilation.
#     - e2e-: for jobs related to end-to-end testing.
#
#  2. Suffixes based on the specific tool or task:
#  For example, for a job that uses PHP_CodeSniffer, use phpcs as a suffix.


# Default configuration for persist_to_workspace and attach_workspace commands
persist_to_workspace: &persist_to_workspace
  persist_to_workspace:
    root: .
    paths:
      - .

attach_workspace: &attach_workspace
  attach_workspace:
    # Must be absolute path or relative path from working_directory
    at: ~/project

# This main executor is used by all jobs unless otherwise specified
executors:
  php-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - name: localhost
        image: cimg/php:8.3
  builder-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/php:8.3-node
        name: localhost
  simple-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/base:stable
        name: localhost



jobs:
  debug-info:
    executor: php-executor
    steps:
      - run:
          name: Debug
          command: |
            echo "Current user: $USER"
            echo "Home directory: $HOME"
            echo "Current shell: $SHELL"
            echo "Operating system: $(uname -a)"
            echo "Current path: $PATH"
            echo "Current working directory: $(pwd)"
            echo "Current date: $(date)"
            echo "--------------------"
            env

  build-setup:
    executor: php-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: composer install --no-interaction --no-ansi --prefer-dist
      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}
      - *persist_to_workspace

  lint-phpcs:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install PHP_CodeSniffer and PHPCompatibility
          command: composer require --dev "squizlabs/php_codesniffer=*" "phpcompatibility/php-compatibility=*"
      - run:
          name: Run PHP_CodeSniffer with Custom Ruleset in the project root
          command: |
            ./vendor/bin/phpcs --standard=phpcs.xml --report-file=phpcs-report.xml --report=junit --extensions=php --ignore=vendor/ .
            result=$?
            if [ $result -eq 1 ] || [ $result -eq 2 ]; then
              echo "PHP_CodeSniffer found issues."
              cat phpcs-report.txt  # Afficher les erreurs dans les logs
              exit 1  # Échoue le job si des problèmes sont trouvés
            else
              echo "PHP_CodeSniffer found no issues."
            fi
      - store_test_results:
          path: phpcs-report.xml


  # how to exploi--> a améliorer et à mettre dans les axes cyber
  metrics-phpmetrics:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install PHP Metrics
          command: composer require --dev phpmetrics/phpmetrics:^3.0.0rc6
      - run:
          name: Run PHP Metrics
          command: |
            ./vendor/bin/phpmetrics --exclude=vendor,tmp --report-html=phpmetrics-report.html ./src
      - store_artifacts:
          path: phpmetrics-report.html
          destination: phpmetrics-report

  #how to exploit ?
  metrics-phploc:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Download phploc.phar
          command: |
            wget https://phar.phpunit.de/phploc.phar
            echo "expected-sha256 phploc.phar" | sha256sum -c -
            chmod +x phploc.phar
      - run:
          name: Run phploc
          command: |
            php phploc.phar ./src > phploc-report.txt
      - store_artifacts:
          path: phploc-report.txt
          destination: phploc-report

  # rendre rapport plus joli
  lint-phpmd:
    executor: php-executor
    steps:
      - checkout
      - *attach_workspace
      - run:
          name: Install PHP Mess Detector in CI environment
          command: composer require --dev phpmd/phpmd:^2.15.0
      - run:
          name: Install xsltproc
          command: sudo apt update && sudo apt install xsltproc
      - run:
          name: Analyse code with PHP Mess Detector
          command: |
            ./vendor/bin/phpmd ./ xml cleancode,codesize,controversial,design,naming,unusedcode --suffixes=php --exclude vendor,tmp > phpmd-report.xml
            result=$?

            xsltproc -o output-junit.xml ./.circleci/junit.xslt  phpmd-report.xml 

            if [ $result -eq 1 ] || [ $result -eq 2 ]; then
              echo "PHP Mess Detector found issues."
              cat phpmd-report.txt
              exit 1  # Échoue le job si des problèmes sont trouvés
            else
              echo "PHP Mess Detector found no issues."
            fi
      - store_test_results:
          path: output-junit.xml
        
  #Outil pas très utile
  lint-php-doc-check:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install PHP Doc Check
          command: composer require --dev niels-de-blaauw/php-doc-check
      - run:
          name: Run PHP Doc Check
          command: |
            ./vendor/bin/php-doc-check ./ --format=text --exclude=vendor --reportFile=php-doc-report.txt --complexity-error-threshold=6 --complexity-warning-threshold=5
            result=$?
            if [ $result -eq 1 ] || [ $result -eq 2 ]; then
              exit 0
            else
              exit $result
            fi
      - store_artifacts:
          path: php-doc-report.txt
          destination: php-doc-report

  phpstan:
    executor: php-executor
    steps:
      - checkout
      - *attach_workspace
      - run:
          name: Install phpstan
          command: composer require --dev phpstan/phpstan:^2.0.1
      - run:
          name: Run phpstan
          command: ./vendor/bin/phpstan analyse src tests --error-format=junit > phpstan-report.xml
      - store_test_results:
          path: phpstan-report.xml

  test-phpunit:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Check if PHPUnit tests are present, otherwise skip the job
          command: |
            if [ ! -f "phpunit.xml" ]; then
              echo "No PHPUnit tests found, skipping job."
              echo "export SKIP_PHPUNIT=true" >> $BASH_ENV
              circleci step halt
            fi
      - run:
          name: Install PHPUnit
          command: composer require --dev phpunit/phpunit:^11.4.3
      - run:
          name: Run PHPUnit
          command: ./vendor/bin/phpunit --testsuite=Unit --log-junit tests/test-results.xml
      - store_test_results:
          path: tests/test-results.xml

  security-trivy-scan:
    executor: simple-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install Trivy
          command: |
            curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.57.0/trivy_0.57.0_Linux-64bit.deb -o trivy.deb
            sudo dpkg -i trivy.deb
            rm trivy.deb
      - run:
          name: Run Trivy scan on Docker image
          command: |
            # Login to GHCR
            echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
            docker pull ghcr.io/yvannponce/php-devsecops/phpapp:${CIRCLE_SHA1} || true
            curl -o junit.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/junit.tpl
            trivy image --exit-code 1 --format template --template junit.tpl -o junit-report.xml --severity HIGH,CRITICAL ghcr.io/yvannponce/php-devsecops/phpapp:${CIRCLE_SHA1} || true
      - store_test_results:
          path: junit-report.xml
      - run:
          name: Check for vulnerabilities in the Trivy report
          command: |
            if grep -q 'CRITICAL' junit-report.xml || grep -q 'HIGH' junit-report.xml; then
              echo "Critical or High vulnerabilities found. Failing the job."
              exit 1
            else
              echo "No critical vulnerabilities found."
            fi


  build-docker-image:
    executor: builder-executor
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Build and Push Docker Image to GHCR (GitHub Container Registry)
          command: |
            if [ ! -z "$SKIP_BUILD" ]; then
              echo "Skipping build"
              circleci step halt
              exit 0
            fi

            # Sanitize the repository name and branch name
            REPOSITORY=$(echo "ghcr.io/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME" | tr '[:upper:]' '[:lower:]' | tr -d '_')
            REPOSITORY="$REPOSITORY/phpapp"
            TAG=$(echo $CIRCLE_BRANCH | tr '[:upper:]' '[:lower:]' | tr '/' '-' | tr -cd '[:alnum:]._-' | cut -c 1-128)

            # Login to GHCR
            echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin

            # Build the Docker image
            docker build -t ghcr.io/yvannponce/php-devsecops/phpapp:${CIRCLE_SHA1} --build-arg TAG="${CIRCLE_SHA1}" .

            # Push the Docker image
            docker push ghcr.io/yvannponce/php-devsecops/phpapp:${CIRCLE_SHA1}


  deploy-ssh-staging:
    executor: simple-executor
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "${STAGING_SSH_FINGERPRINT}"
      - deploy:
          name: Deploy to Ozeliurs Cloud provider
          command: |
            sed -i "s|__IMAGE_TAG__|${CIRCLE_SHA1}|" docker-compose.yml;
            scp -o StrictHostKeyChecking=no -P 17625 docker-compose.yml debian@fbx.ozeliurs.com:/home/debian/app
            ssh -o StrictHostKeyChecking=no -p 17625 debian@fbx.ozeliurs.com "
            echo $GHCR_PAT | docker login ghcr.io -u $GHCR_USERNAME --password-stdin;
            docker compose -f /home/debian/app/docker-compose.yml up -d;
            "


workflows:
  main_workflow:
    jobs:
      - debug-info
      - build-setup
      - lint-phpcs:
          requires:
            - build-setup
      - metrics-phpmetrics:
          requires:
            - build-setup
      - metrics-phploc:
          requires:
            - build-setup
      - lint-phpmd:
          requires:
            - build-setup
      - lint-php-doc-check:
          requires:
            - build-setup
      - test-phpunit:
          requires:
            - build-setup

  container_workflow:
    jobs:
      - build-docker-image:
          filters:
            branches:
              only:
                - master
                - main
                - develop
                - /^feature\/.*/
                - /^release\/.*/
                - /^hotfix\/.*/
                - /^bugfix\/.*/    
      - security-trivy-scan:
          requires:
            - build-docker-image
          filters:
            branches:
              only:
                - master
                - main
                - develop
                - /^feature\/.*/
                - /^release\/.*/
                - /^hotfix\/.*/
                - /^bugfix\/.*/   
      - deploy-ssh-staging:
          type: approval
          requires:
            - security-trivy-scan
          filters:
            branches:
              only:
                - master
                - main
                - develop
                - /^feature\/.*/
                - /^release\/.*/
                - /^hotfix\/.*/
                - /^bugfix\/.*/