version: 2.1

# List of all environment variables accessible in this config file
# https://circleci.com/docs/2.0/env-vars/#built-in-environment-variables

# Recommendations
# ---------------

# General Principles:
#
#  1. Descriptive: The job name should clearly describe what the job does.
#  2. Concise: Names should be as short as possible while still being descriptive.
#  3. Consistent: Use a consistent format or pattern for all job names.
#  4. Avoid Ambiguous Abbreviations: If you use abbreviations, ensure they are widely understood.
#
# Naming Convention Proposal:
#
#  1. Prefixes based on the nature of the job:
#     - build-: for jobs related to building or installation.
#     - lint-: for jobs related to code quality checking.
#     - test-: for jobs related to testing.
#     - security-: for jobs related to security.
#     - metrics-: for jobs related to metrics generation.
#     - deploy-: for jobs related to deployment.
#     - notify-: for jobs related to notifications.
#     - debug-: for jobs related to debugging.
#     - setup-: for jobs related to set up.
#     - init-: for jobs related to initialization.
#     - generate-: for jobs related to generation.
#     - validate-: for jobs related to validation.
#     - compile-: for jobs related to compilation.
#     - e2e-: for jobs related to end-to-end testing.
#
#  2. Suffixes based on the specific tool or task:
#  For example, for a job that uses PHP_CodeSniffer, use phpcs as a suffix.


# Default configuration for persist_to_workspace and attach_workspace commands
persist_to_workspace: &persist_to_workspace
  persist_to_workspace:
    root: .
    paths:
      - .

attach_workspace: &attach_workspace
  attach_workspace:
    # Must be absolute path or relative path from working_directory
    at: ~/project

# This main executor is used by all jobs unless otherwise specified
executors:
  php-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - name: localhost
        image: cimg/php:8.3
  builder-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/php:8.3-node
        name: localhost
  simple-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/base:stable
        name: localhost

commands:
  infisical-setup:
    steps:
      - run:
          name: Install infisical cli
          command: |
            curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.deb.sh' | sudo -E bash
            sudo apt-get update  
            sudo apt-get install -y infisical

jobs:
  debug-info:
    executor: php-executor
    steps:
      - run:
          name: Debug
          command: |
            echo "Current user: $USER"
            echo "Home directory: $HOME"
            echo "Current shell: $SHELL"
            echo "Operating system: $(uname -a)"
            echo "Current path: $PATH"
            echo "Current working directory: $(pwd)"
            echo "Current date: $(date)"
            echo "--------------------"
            env

  build-setup:
    executor: php-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ checksum "composer.json" }}
      - run:
          name: Install dependencies
          command: composer install --no-interaction --no-ansi --prefer-dist
      - save_cache:
          paths:
            - ./vendor
          key: dependencies-{{ checksum "composer.json" }}
      - *persist_to_workspace


  lint-phpcs:
    executor: php-executor
    steps:
      - checkout
      - *attach_workspace
      - run:
          name: Install PHP_CodeSniffer and PHPCompatibility
          command: composer require --dev "squizlabs/php_codesniffer=^3.7.2" "phpcompatibility/php-compatibility=^9.3.5"
      - run:
          name: Run PHP_CodeSniffer with Custom Ruleset in the project root
          command: |
            ./vendor/bin/phpcs --standard=phpcs.xml --report-file=phpcs-report.xml --report=junit --extensions=php --ignore=vendor/ .
            result=$?
            if [ $result -eq 1 ] || [ $result -eq 2 ]; then
              exit 0
            else
              exit $result
            fi
      - store_test_results:
          path: phpcs-report.xml


  security-check-dependencies:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install local-php-security-checker
          command: |
            curl -L -o local-php-security-checker https://github.com/fabpot/local-php-security-checker/releases/download/v2.1.3/local-php-security-checker_linux_amd64
            chmod +x local-php-security-checker
      - run:
          name: Run local-php-security-checker
          command: ./local-php-security-checker --format=json --no-dev > security-report.json
      - store_artifacts:
          path: security-report.json
          destination: security-report



  test-phpunit:
    executor: php-executor
    steps:
      - checkout
      - *attach_workspace
      - restore_cache:
          keys:
            - phpunit
      - run:
          name: Check if PHPUnit tests are present, otherwise skip the job
          command: |
            if [ ! -f "phpunit.xml" ]; then
              echo "No PHPUnit tests found, skipping job."
              echo "export SKIP_PHPUNIT=true" >> $BASH_ENV
              circleci step halt
            fi
      - run:
          name: Install PHPUnit
          command: composer require --dev phpunit/phpunit:^11.4.3
      - run:
          name: Run PHPUnit
          command: ./vendor/bin/phpunit --testsuite=Unit --log-junit junit-results.xml
      - store_test_results:
          path: junit-results.xml
      - save_cache:
          paths:
            - ./vendor
          key: phpunit

  
  php-metrics:
    executor: php-executor
    steps:
      - checkout
      - *attach_workspace
      - restore_cache:
          keys:
            - phpmetrics
      - run:
          name: Install PhpMetrics
          command: composer require --dev phpmetrics/phpmetrics:^3.0.0rc6
      - run:
          name: Run PhpMetrics
          command: ./vendor/bin/phpmetrics --report-html=phpmetrics-report ./
      - store_artifacts:
          path: phpmetrics-report
      - save_cache:
          paths:
            - ./vendor
          key: phpmetrics
  
  phpstan:
    executor: php-executor
    steps:
      - checkout
      - *attach_workspace
      - run:
          name: Install phpstan
          command: composer require --dev phpstan/phpstan:^2.0.1
      - run:
          name: Run phpstan
          command: ./vendor/bin/phpstan analyse src tests --error-format=junit > phpstan-report.xml
      - store_test_results:
          path: phpstan-report.xml


  build-docker-image:
    executor: builder-executor
    steps:
      - checkout
      - setup_remote_docker
      - infisical-setup
      - run: 
          name: Add docker signing key
          command: |
            export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$DOCKER_PASSPHRASE
            export DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE=$DOCKER_PASSPHRASE
      - run:
          name: Build and Push Docker Image to GHCR (GitHub Container Registry)
          command: |
            if [ ! -z "$SKIP_BUILD" ]; then
              echo "Skipping build"
              circleci step halt
              exit 0
            fi

            # Sanitize the repository name and branch name
            REPOSITORY=$(echo "ghcr.io/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME" | tr '[:upper:]' '[:lower:]' | tr -d '_')
            TAG=$(echo $CIRCLE_BRANCH | tr '[:upper:]' '[:lower:]' | tr '/' '-' | tr -cd '[:alnum:]._-' | cut -c 1-128)

            # Login to GHCR
            echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin

            # Build the Docker image
            docker build -t ghcr.io/yvannponce/php-devsecops/phpapp:${CIRCLE_SHA1} --build-arg TAG="${CIRCLE_SHA1}" .

            # Sign the docker image
            # docker trust sign ghcr.io/yvannponce/php-devsecops/phpapp:${CIRCLE_SHA1}

            # Push the Docker image
            docker push ghcr.io/yvannponce/php-devsecops/phpapp:${CIRCLE_SHA1}


  deploy-ssh-staging:
    executor: simple-executor
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "${STAGING_SSH_FINGERPRINT}"
      - deploy:
          name: Deploy to Ozeliurs Cloud provider
          command: |
            sed -i "s|__IMAGE_TAG__|${CIRCLE_SHA1}|" docker-compose.yml;
            scp -o StrictHostKeyChecking=no -P 17625 docker-compose.yml debian@fbx.ozeliurs.com:/home/debian/app
            ssh -o StrictHostKeyChecking=no -p 17625 debian@fbx.ozeliurs.com "
            echo $GHCR_PAT | docker login ghcr.io -u $GHCR_USERNAME --password-stdin;
            docker compose -f /home/debian/app/docker-compose.yml up -d;
            "
            


#  deploy-ssh-production:
# It's up to you :)


workflows:
  main_workflow:
    jobs:
      #- debug-info
      #- build-setup
      #- lint-phpcs
      ##- security-check-dependencies:
      ##    requires:
      ##      - build-setup
      #- test-phpunit
      #- php-metrics
      #- phpstan
      - build-docker-image
      #- hold:
      #    type: approval
      #    requires:
      #      - build-docker-image
      # - deploy-ssh-production:
      #     requires:
      #         - hold
      #     filters:
      #       branches:
      #         only:
      #           - main
      #           - master
      #- deploy-ssh-staging:
      #    requires:
      #      - hold
      #    #filters:
      #    #  branches:
      #    #    only:
      #    #      - /^release\/.*/


  container_workflow:
    jobs:
      - build-docker-image:
          filters:
            branches:
              only:
                - master
                - main
                - develop
                - /^feature\/.*/
                - /^release\/.*/
                - /^hotfix\/.*/
                - /^bugfix\/.*/